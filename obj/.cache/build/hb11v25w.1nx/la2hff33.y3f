<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class ServerSocketLiteNetLib
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class ServerSocketLiteNetLib
   ">
    <meta name="generator" content="docfx 2.56.5.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib">
  
  
  <h1 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib" class="text-break">Class ServerSocketLiteNetLib
  </h1>
  <div class="markdown level0 summary"></div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">ServerSocketLiteNetLib</span></div>
  </div>
  <div classs="implements">
    <h5>Implements</h5>
    <div><a class="xref" href="FigNet.Core.IServerSocket.html">IServerSocket</a></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <span class="xref">System.Object.Equals(System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.Equals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.GetHashCode()</span>
    </div>
    <div>
      <span class="xref">System.Object.GetType()</span>
    </div>
    <div>
      <span class="xref">System.Object.MemberwiseClone()</span>
    </div>
    <div>
      <span class="xref">System.Object.ReferenceEquals(System.Object, System.Object)</span>
    </div>
    <div>
      <span class="xref">System.Object.ToString()</span>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="FigNetProviders.LiteNetLib.html">FigNetProviders.LiteNetLib</a></h6>
  <h6><strong>Assembly</strong>: FigNetProviders.dll</h6>
  <h5 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class ServerSocketLiteNetLib : IServerSocket</code></pre>
  </div>
  <h3 id="properties">Properties
  </h3>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Name_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Name*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Name" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Name">Name</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string Name { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_NetStatistics_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.NetStatistics*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_NetStatistics" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.NetStatistics">NetStatistics</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public INetStatistics NetStatistics { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="FigNet.Core.INetStatistics.html">INetStatistics</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_OnConnected_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.OnConnected*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_OnConnected" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.OnConnected">OnConnected</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Action&lt;IPeer&gt; OnConnected { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Action</span>&lt;<a class="xref" href="FigNet.Core.IPeer.html">IPeer</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_OnDisconnected_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.OnDisconnected*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_OnDisconnected" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.OnDisconnected">OnDisconnected</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Action&lt;IPeer&gt; OnDisconnected { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Action</span>&lt;<a class="xref" href="FigNet.Core.IPeer.html">IPeer</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_GetSocket_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.GetSocket*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_GetSocket__1" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.GetSocket``1">GetSocket&lt;T&gt;()</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public T GetSocket&lt;T&gt;()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Listen_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Listen*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Listen_System_UInt16_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Listen(System.UInt16)">Listen(UInt16)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Listen(ushort port)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td><span class="parametername">port</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Listen_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Listen*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Listen_System_UInt16_System_UInt16_System_UInt16_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Listen(System.UInt16,System.UInt16,System.UInt16)">Listen(UInt16, UInt16, UInt16)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Listen(ushort port, ushort maxConnection, ushort maxChannels)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td><span class="parametername">port</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td><span class="parametername">maxConnection</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.UInt16</span></td>
        <td><span class="parametername">maxChannels</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_OnMessage_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.OnMessage*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_OnMessage_FigNet_Core_IMessage_FigNet_Core_IPeer_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.OnMessage(FigNet.Core.IMessage,FigNet.Core.IPeer)">OnMessage(IMessage, IPeer)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void OnMessage(IMessage message, IPeer peer)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="FigNet.Core.IMessage.html">IMessage</a></td>
        <td><span class="parametername">message</span></td>
        <td></td>
      </tr>
      <tr>
        <td><a class="xref" href="FigNet.Core.IPeer.html">IPeer</a></td>
        <td><span class="parametername">peer</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Process_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Process*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Process" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Process">Process()</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Process()</code></pre>
  </div>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_SendMessage_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.SendMessage*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_SendMessage_FigNet_Core_IPeer_FigNet_Core_IMessage_FigNet_Core_DeliveryMethod_System_Byte_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.SendMessage(FigNet.Core.IPeer,FigNet.Core.IMessage,FigNet.Core.DeliveryMethod,System.Byte)">SendMessage(IPeer, IMessage, DeliveryMethod, Byte)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SendMessage(IPeer peer, IMessage message, DeliveryMethod mode, byte channelId)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="FigNet.Core.IPeer.html">IPeer</a></td>
        <td><span class="parametername">peer</span></td>
        <td></td>
      </tr>
      <tr>
        <td><a class="xref" href="FigNet.Core.IMessage.html">IMessage</a></td>
        <td><span class="parametername">message</span></td>
        <td></td>
      </tr>
      <tr>
        <td><a class="xref" href="FigNet.Core.DeliveryMethod.html">DeliveryMethod</a></td>
        <td><span class="parametername">mode</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span></td>
        <td><span class="parametername">channelId</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_SendMessageToAll_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.SendMessageToAll*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_SendMessageToAll_FigNet_Core_IMessage_FigNet_Core_DeliveryMethod_System_Byte_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.SendMessageToAll(FigNet.Core.IMessage,FigNet.Core.DeliveryMethod,System.Byte)">SendMessageToAll(IMessage, DeliveryMethod, Byte)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SendMessageToAll(IMessage message, DeliveryMethod mode, byte channelId)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="FigNet.Core.IMessage.html">IMessage</a></td>
        <td><span class="parametername">message</span></td>
        <td></td>
      </tr>
      <tr>
        <td><a class="xref" href="FigNet.Core.DeliveryMethod.html">DeliveryMethod</a></td>
        <td><span class="parametername">mode</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Byte</span></td>
        <td><span class="parametername">channelId</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Stop_" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Stop*"></a>
  <h4 id="FigNetProviders_LiteNetLib_ServerSocketLiteNetLib_Stop" data-uid="FigNetProviders.LiteNetLib.ServerSocketLiteNetLib.Stop">Stop()</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Stop()</code></pre>
  </div>
  <h3 id="implements">Implements</h3>
  <div>
      <a class="xref" href="FigNet.Core.IServerSocket.html">IServerSocket</a>
  </div>
  <h3 id="extensionmethods">Extension Methods</h3>
  <div>
      <a class="xref" href="FigNet.Core.Extensions.html#FigNet_Core_Extensions_SerializeAsXml__1___0_">Extensions.SerializeAsXml&lt;T&gt;(T)</a>
  </div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
                <h5>In This Article</h5>
                <div></div>
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
